functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-ios-sdk"
  "setup_swiftlint":
    - command: shell.exec
      params:
        script: |
          set -e
          export DEVELOPER_DIR=/Applications/Xcode10.2.app
          mkdir -p SwiftLint
          pushd SwiftLint
          curl -o swiftlint.zip -L https://github.com/realm/SwiftLint/releases/download/0.29.1/portable_swiftlint.zip
          unzip swiftlint.zip
          popd
  "setup_mongod":
    - command: shell.exec
      params:
        script: |
          set -e
          curl --silent ${mongodb_url} | tar xz
          cd mongodb-*
          mkdir db_files
  "run_mongod":
    - command: shell.exec
      params:
        background: true
        script: |
          set -e
          cd mongodb-*
          echo "starting mongod..."
          ./bin/mongod --dbpath ./db_files --port 26000 --replSet test
    - command: shell.exec
      params:
        script: |
          set -e
          cd mongodb-*
          echo "waiting for mongod to start up"
          ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
          ./bin/mongo --port 26000 --eval 'rs.initiate()'
          echo "mongod is up."
  "setup_stitch":
    - command: shell.exec
      params:
        script: |
          set -e
          echo "cloning stitch"
          mkdir -p src/github.com/10gen
          git clone git@github.com:10gen/stitch src/github.com/10gen/stitch
          echo "downloading update_doc"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7a5c9ec4432c400181c_17_10_15_01_19_33/update_doc"
          echo "downloading assisted_agg"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7ab2a60ed5647001827_17_10_15_01_19_39/assisted_agg"
          chmod +x update_doc
          chmod +x assisted_agg

          mkdir -p src/github.com/10gen/stitch/etc/dylib
          cd src/github.com/10gen/stitch/etc/dylib
          curl -s "${server_stitch_lib_url}" | tar xvfz - --strip-components=1
          cd -

          echo "building transpiler"
          cd src/github.com/10gen/stitch/etc/transpiler
          curl -O "https://nodejs.org/dist/v8.11.2/node-v8.11.2-darwin-x64.tar.gz"
          tar zxf node-v8.11.2-darwin-x64.tar.gz
          export PATH=`pwd`/node-v8.11.2-darwin-x64/bin/:$PATH
          rm -rf $HOME/.yarn
          curl -o- -L https://yarnpkg.com/install.sh | bash
          export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
          yarn install && yarn run build -t ${transpiler_target}
    - command: shell.exec
      params:
        background: true
        script: |
          set -e
          export PATH=`pwd`/:$PATH
          curl --silent https://dl.google.com/go/go1.10.2.darwin-amd64.tar.gz | tar xz
          export GOROOT=`pwd`/go
          export PATH=$GOROOT/bin:$PATH
          export GOPATH=`pwd`
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          export LD_LIBRARY_PATH="$STITCH_PATH/etc/dylib/lib"
          echo "running stitch"
          # TODO: Probably better to get an API key added to mimic cloud
          go run $STITCH_PATH/cmd/auth/user.go addUser -domainID 000000000000000000000000 -mongoURI mongodb://localhost:26000 -salt 'DQOWene1723baqD!_@#' -id "unique_user@domain.com" -password "password"
  "run_stitch":
    - command: shell.exec
      params:
        background: true
        script: |
          export PATH=`pwd`/:$PATH
          export GOROOT=`pwd`/go
          export PATH=$GOROOT/bin:$PATH
          export GOPATH=`pwd`
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          export LD_LIBRARY_PATH="$STITCH_PATH/etc/dylib/lib"
          go run $STITCH_PATH/cmd/server/main.go --configFile $STITCH_PATH/etc/configs/test_config.json
    - command: shell.exec
      params:
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail http://localhost:9090); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done
  "clear_disk_space":
    - command: shell.exec
      params:
        script: |
          rm -rf /Users/mci/Library/Developer/Xcode/DerivedData/
          rm -rf /Users/mci/Library/Caches/go-build
          export DEVELOPER_DIR=/Applications/Xcode10.2.app
          xcrun simctl delete __stitch__
  "setup_ios":
    - command: shell.exec
      params:
        silent: true
        script: |
          set -e
          export DEVELOPER_DIR=/Applications/Xcode10.2.app
          if pgrep CoreSimulator; then pkill -9 CoreSimulator; fi
          echo export AWS_ACCESS_KEY_ID=${test_aws_key} >> creds
          echo export AWS_SECRET_ACCESS_KEY=${test_aws_secret} >> creds
          echo export TWILIO_SID=${test_twilio_sid} >> creds
          echo export TWILIO_AUTH_TOKEN=${test_twilio_authtoken} >> creds
          echo export FCM_SENDER_ID=${test_fcm_sender_id} >> creds
          echo export FCM_API_KEY=${test_fcm_api_key} >> creds
          echo export PERF_IOS_API_KEY=${perf_ios_api_key} >> creds
          echo export COVERALLS_TOKEN=${coveralls_repo_token} >> creds
          SID=`python stitch-ios-sdk/etc/read_ios_runtime.py`
          echo export SIM_ID=$SID >> creds
  "setup_pods":
    - command: shell.exec
      params:
        script: |
          set -e

          export DEVELOPER_DIR=/Applications/Xcode10.2.app
          cd stitch-ios-sdk
          export GEM_HOME=`pwd`
          export GEM_PATH=`pwd`
          /opt/chef/embedded/bin/gem install cocoapods -v 1.7.0 --install-dir ./
          bin/pod install --repo-update || (rm -rf ~/.cocoapods/repos && bin/pod install --repo-update) 
tasks:
  - name: lint
    commands:
      - func: "fetch_source"
      - func: "setup_swiftlint"
      - command: shell.exec
        params: 
          script: |
            set -e
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            pushd SwiftLint
            export PATH=`pwd`:$PATH
            popd
            cd stitch-ios-sdk
            contrib/lint_projects.sh
  - name: run_core_sdk_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "All Core Tests" \
              -destination id=$SIM_ID
  - name: run_ios_core_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchCore" \
              -destination id=$SIM_ID
  - name: run_ios_services_mongodb_remote_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchRemoteMongoDBService" \
              -destination id=$SIM_ID
  - name: run_ios_services_aws_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchAWSService" \
              -destination id=$SIM_ID \
              GCC_PREPROCESSOR_DEFINITIONS='AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'
  - name: run_ios_services_fcm_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchFCMService" \
              -destination id=$SIM_ID \
              GCC_PREPROCESSOR_DEFINITIONS='FCM_SENDER_ID=$FCM_SENDER_ID FCM_API_KEY=$FCM_API_KEY'
  - name: run_ios_services_http_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchHTTPService" \
              -destination id=$SIM_ID
  - name: run_ios_services_mongodb_local_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchLocalMongoDBService" \
              -destination id=$SIM_ID
  - name: run_ios_services_twilio_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchTwilioService" \
              -destination id=$SIM_ID \
              GCC_PREPROCESSOR_DEFINITIONS='TWILIO_SID=$TWILIO_SID TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN'
  - name: run_ios_services_mongodb_remote_performance_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            source ./creds
            export DEVELOPER_DIR=/Applications/Xcode10.2.app
            cd stitch-ios-sdk

            xcodebuild test \
              -verbose \
              -workspace Stitch.xcworkspace/ \
              -scheme "StitchSyncPerformanceTests" \
              -destination id=$SIM_ID \
              GCC_PREPROCESSOR_DEFINITIONS='PERF_IOS_API_KEY=$PERF_IOS_API_KEY PERF_IOS_STITCH_HOST=prod PERF_IOS_HOSTNAME=Evergreen PERF_IOS_DOC_SIZES=11-22 PERF_IOS_NUM_DOCS=100-200 PERF_IOS_NUM_ITERS=1'
task_groups:
  - name: run_core_tests
    setup_group_can_fail_task: true
    max_hosts: 1
    setup_group:
      - func: "fetch_source"
      - func: "setup_ios"
      - func: "setup_pods"
    tasks:
      - run_core_sdk_tests
    teardown_group:
      - func: "clear_disk_space"
  - name: run_ios_tests
    setup_group_can_fail_task: true
    max_hosts: 3
    setup_group:
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "run_mongod"
      - func: "setup_stitch"
      - func: "setup_ios"
      - func: "setup_pods"
    setup_task:
      - func: "run_mongod"
      - func: "run_stitch"
    tasks:
      - run_ios_core_tests
      - run_ios_services_mongodb_remote_tests
      - run_ios_services_aws_tests
      - run_ios_services_fcm_tests
      - run_ios_services_http_tests
      - run_ios_services_mongodb_local_tests
      - run_ios_services_twilio_tests
    teardown_group:
      - func: "clear_disk_space"
  - name: run_ios_performance_tests
    setup_group_can_fail_task: true
    max_hosts: 1
    setup_group:
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "run_mongod"
      - func: "setup_stitch"
      - func: "setup_ios"
      - func: "setup_pods"
    setup_task:
      - func: "run_mongod"
      - func: "run_stitch"
    tasks:
      - run_ios_services_mongodb_remote_performance_tests
    teardown_group:
      - func: "clear_disk_space"
buildvariants:
- name: macos-1014
  display_name: macos-1014
  run_on:
    - macos-1014
  expansions:
    mongodb_url: http://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.2.tgz
    transpiler_target: node8-macos
    server_stitch_lib_url: 'https://s3.amazonaws.com/mciuploads/mongodb-mongo-master/stitch-support/osx-1010/80f9a13324fc36b2deb400e5a185968f6fa8f64a/stitch-support-4.1.7-319-g80f9a13324.tgz'
  tasks:
    - name: run_core_tests
    - name: run_ios_tests
    - name: lint
