functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-ios-sdk"
  "setup_swiftlint":
    - command: shell.exec
      params:
        script: |
          git clone https://github.com/realm/SwiftLint
          cd SwiftLint
          git submodule update --init --recursive
          make install
  "setup_mongod":
    - command: shell.exec
      params:
        script: |
          set -e
          curl --silent ${mongodb_url} | tar xz
    - command: shell.exec
      params:
        background: true
        script: |
          set -e
          cd mongodb-*
          echo "starting mongod..."
          mkdir db_files
          ./bin/mongod --dbpath ./db_files --port 26000 --replSet test
    - command: shell.exec
      params:
        script: |
          set -e
          cd mongodb-*
          echo "waiting for mongod to start up"
          ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
          ./bin/mongo --port 26000 --eval 'rs.initiate()'
          echo "mongod is up."
  "setup_stitch":
    - command: shell.exec
      params:
        script: |
          set -e
          echo "cloning stitch"
          mkdir -p src/github.com/10gen
          git clone git@github.com:10gen/stitch src/github.com/10gen/stitch

          echo "downloading update_doc"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7a5c9ec4432c400181c_17_10_15_01_19_33/update_doc"
          echo "downloading assisted_agg"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7ab2a60ed5647001827_17_10_15_01_19_39/assisted_agg"
          chmod +x update_doc
          chmod +x assisted_agg

          echo "building transpiler"
          cd src/github.com/10gen/stitch/etc/transpiler
          curl -O "https://nodejs.org/dist/v8.11.2/node-v8.11.2-darwin-x64.tar.gz"
          tar zxf node-v8.11.2-darwin-x64.tar.gz
          export PATH=`pwd`/node-v8.11.2-darwin-x64/bin/:$PATH
          rm -rf $HOME/.yarn
          curl -o- -L https://yarnpkg.com/install.sh | bash
          export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
          yarn install && yarn run build -t ${transpiler_target}
    - command: shell.exec
      params:
        background: true
        script: |
          set -e
          export PATH=`pwd`/:$PATH
          curl --silent https://dl.google.com/go/go1.10.2.darwin-amd64.tar.gz | tar xz
          export GOROOT=`pwd`/go
          export PATH=$GOROOT/bin:$PATH
          export GOPATH=`pwd`
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          echo "running stitch"
          # TODO: Probably better to get an API key added to mimic cloud
          go run $STITCH_PATH/cmd/auth/user.go addUser -domainID 000000000000000000000000 -mongoURI mongodb://localhost:26000 -salt 'DQOWene1723baqD!_@#' -id "unique_user@domain.com" -password "password"
          go run $STITCH_PATH/cmd/server/main.go --configFile $STITCH_PATH/etc/configs/test_config.json
    - command: shell.exec
      params:
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail http://localhost:9090); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done
tasks:
  - name: lint
    commands:
      - func: "fetch_source"
      - func: "setup_swiftlint"
      - command: shell.exec
        params: 
          script: |
            set -e
            cd stitch-ios-sdk
            contrib/lint_projects.sh
  - name: run_tests
    commands:
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "setup_stitch"
      - command: shell.exec
        params:
          silent: true
          script: |
            set -e
            echo export AWS_ACCESS_KEY_ID=${test_aws_key} >> creds
            echo export AWS_SECRET_ACCESS_KEY=${test_aws_secret} >> creds
            echo export TWILIO_SID=${test_twilio_sid} >> creds
            echo export TWILIO_AUTH_TOKEN=${test_twilio_authtoken} >> creds
            echo export FCM_SENDER_ID=${test_fcm_sender_id} >> creds
            echo export FCM_API_KEY=${test_fcm_api_key} >> creds
            echo export COVERALLS_TOKEN=${coveralls_repo_token} >> creds
      - command: shell.exec
        params:
          script: |
            set -e

            echo "running ios tests"
            
            source ./creds
            if pgrep CoreSimulator; then pkill -9 CoreSimulator; fi
            export DEVELOPER_DIR=/Applications/Xcode10.0.app
            cd stitch-ios-sdk

            pushd Dummy
            xcodebuild
            xcodebuild test -scheme "Dummy"
            popd

            export GEM_HOME=`pwd`
            export GEM_PATH=`pwd`
            locate cocoapods
            /opt/chef/embedded/bin/gem install cocoapods -v 1.6.0.beta.1 --install-dir ./
            bin/pod setup
            bin/pod install
            echo "...testing core"
            # xcodebuild test -verbose -workspace Stitch.xcworkspace/ -scheme "StitchCoreHTTPService" -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0'
            xcodebuild test -verbose -workspace Stitch.xcworkspace/ -scheme "StitchCoreSDK" -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0'
            xcodebuild test -verbose -workspace Stitch.xcworkspace/ -scheme "All Core Tests" -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0'
            echo "...testing Darwin"
            xcodebuild test -verbose -workspace Stitch.xcworkspace/ -scheme "All Darwin Tests" -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0'
  - name: print_diag_log
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          script: |
            set -e
            rm -r /Users/mci/Library/Developer/Xcode/DerivedData
            xcode-select -p
            echo which xcodebuild
            which xcodebuild
            xcodebuild -version
            alias xcb=/Applications/Xcode10.0.0.app/Contents/Developer/usr/bin/xcodebuild
            cd stitch-ios-sdk
            pushd Dummy
            # locate xcodebuild
            # xcb
            clang --version
            xcb -version
            # xcb
            xcb -scheme "Dummy" -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0'
            xcb test -scheme "Dummy" -showdestinations
            xcb test -scheme "Dummy" -destination 'platform=iOS Simulator,name=iPhone X,OS=12.0'
            popd

buildvariants:
- name: macos-1014-stitch
  display_name: MacOS 10.14
  run_on:
    - macos-1014-stitch
  expansions:
    mongodb_url: https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.2.tgz
    transpiler_target: node8-macos
  tasks:
    - name: run_tests
    - name: lint
    - name: print_diag_log
